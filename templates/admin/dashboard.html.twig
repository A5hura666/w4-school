{% extends 'base.html.twig' %}

{% block content %}
    <div class="p-4 sm:ml-64 mt-8">
        <div class="m-6 w-full">
            <div class="min-h-screen bg-gray-100 dark:bg-gray-900 p-6 w-full h-2.5">
                <h1 class="text-3xl font-bold mb-6 text-gray-800 dark:text-white">Tableau de bord</h1>
                <div class="flex justify-between" style="gap: 5%">
                    <div class="w-full max-w-sm bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 py-6">
                        <div class="flex flex-row items-center pb-10 ">
                            <div class="w-1/4 flex justify-center">
                                <svg class="flex-shrink-0 w-9 h-9 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white h-11 w-11" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 18">
                                    <path d="M14 2a3.963 3.963 0 0 0-1.4.267 6.439 6.439 0 0 1-1.331 6.638A4 4 0 1 0 14 2Zm1 9h-1.264A6.957 6.957 0 0 1 15 15v2a2.97 2.97 0 0 1-.184 1H19a1 1 0 0 0 1-1v-1a5.006 5.006 0 0 0-5-5ZM6.5 9a4.5 4.5 0 1 0 0-9 4.5 4.5 0 0 0 0 9ZM8 10H5a5.006 5.006 0 0 0-5 5v2a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-2a5.006 5.006 0 0 0-5-5Z"/>
                                </svg>
                            </div>
                            <div>
                                <h5 class="mb-1 text-xl font-medium text-gray-900 dark:text-white">Nombre d'utilisateurs</h5>
                                <span class="text-3xl text-gray-500 dark:text-gray-400 ">{{ userCount }}</span>
                            </div>
                        </div>
                    </div>
                    <div class="w-full max-w-sm bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 py-6">
                        <div class="flex flex-row items-center pb-10 ">
                            <div class="w-1/4 flex justify-center">
                                <svg class="flex-shrink-0 w-9 h-9 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white h-11 w-11"
                                     aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 21">
                                    <path d="M16 14V2a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2v15a3 3 0 0 0 3 3h12a1 1 0 0 0 0-2h-1v-2a2 2 0 0 0 2-2ZM4 2h2v12H4V2Zm8 16H3a1 1 0 0 1 0-2h9v2Z"/>
                                </svg>
                            </div>
                            <div>
                                <h5 class="mb-1 text-xl font-medium text-gray-900 dark:text-white">Nombre de cours</h5>
                                <span class="text-3xl text-gray-500 dark:text-gray-400 ">{{ coursesCount }}</span>
                            </div>
                        </div>
                    </div>
                    <div class="w-full max-w-sm bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 py-6">
                        <div class="flex flex-row items-center pb-10 ">
                            <div class="w-1/4 flex justify-center">
                                <svg class="flex-shrink-0 w-9 h-9 text-gray-500 transition duration-75 dark:text-gray-400 group-hover:text-gray-900 dark:group-hover:text-white h-11 w-11" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" ><path d="M12 16v5"/><path d="M16 14v7"/><path d="M20 10v11"/><path d="m22 3-8.646 8.646a.5.5 0 0 1-.708 0L9.354 8.354a.5.5 0 0 0-.707 0L2 15"/><path d="M4 18v3"/><path d="M8 14v7"/></svg>
                            </div>
                            <div>
                                <h5 class="mb-1 text-xl font-medium text-gray-900 dark:text-white">Inscription ce dernier mois</h5>
                                <span class="text-3xl text-gray-500 dark:text-gray-400 ">{{ usersRegisteredLast30Days }}</span>
                            </div>
                        </div>

                    </div>
                </div>
                <div class="flex flex-row" style="gap: 5%">
                    <div class="min-h-screen bg-gray-100 dark:bg-gray-900 mt-8 w-full h-2.5">
                        <h1 class="text-3xl font-bold mb-6 text-gray-800 dark:text-white">Répartition des utilisateurs</h1>
                        <div class=" bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 py-6">

                            <canvas id="chartCanvas" width="200" height="200"></canvas>
                        </div>
                    </div>
                    <div class="min-h-screen bg-gray-100 dark:bg-gray-900 mt-8 w-full h-2.5">
                        <div class="flex items-center">
                            <h1 class="text-3xl font-bold mb-6 text-gray-800 dark:text-white">Évolution des inscriptions</h1>
                            <div class="flex mb-4 ml-2 ">
                                <select name="periodFilter" id="periodFilterSelect" class="rounded-md text-sm h-8" style="padding-top: 0;padding-bottom: 0;">
                                    <option value="year" class="text-sm" >Année</option>
                                    <option value="month" class="text-sm">Mois</option>
                                </select>
                            </div>
                        </div>
                        <div class="w-full bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 py-6">
                            <canvas id="registrationChart" width="300" height="200"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        updateChartData(document.getElementById('periodFilterSelect').value);

        let chart;
        document.addEventListener('DOMContentLoaded', function () {
            const ctx = document.getElementById('chartCanvas').getContext('2d');

            chart = new Chart(ctx, {
                type: 'pie', // Type de graphique (bar, line, pie, etc.)
                data: {
                    labels: ['Étudiants', 'Professeurs', 'Admin'], // Labels des catégories
                    datasets: [{
                        label: 'Nombre',
                        data: [{{ studentCount }}, {{ teacherCount }}, {{ adminCount }}], // Données dynamiques
                        backgroundColor: [
                            'rgba(54, 162, 235, 0.6)', // Couleur pour Étudiants
                            'rgba(255, 99, 132, 0.6)',  // Couleur pour Professeurs
                            'rgba(255, 206, 86, 0.6)' // Couleur pour Admin
                        ],
                        borderColor: [
                            'rgba(54, 162, 235, 1)', // Bordure pour Étudiants
                            'rgba(255, 99, 132, 1)',  // Bordure pour Professeurs
                            'rgba(255, 206, 86, 1)' // Couleur pour Admin
                        ],
                        borderWidth: 1,
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                }
            });
        });


        const canvas = document.getElementById('chartCanvas');
        canvas.onclick = (evt) => {
            const res = chart.getElementsAtEventForMode(
                evt,
                'nearest',
                { intersect: true },
                true
            );

            if (res.length > 0) {
                const index = res[0].index;
                const label = chart.data.labels[index];
                if (label === 'Étudiants') {
                    window.location.href = '{{ path('admin_users',  {'userType': 'student'}) }}';
                } else if (label === 'Professeurs') {
                    window.location.href = '{{ path('admin_users', {'userType': 'teacher'}) }}';
                } else if (label === 'Admin') {
                    window.location.href = '{{ path('admin_users', {'userType': 'admin'}) }}';
                }
            }
        };

        let registrationChart;

        document.addEventListener('DOMContentLoaded', function () {
            const ctx = document.getElementById('registrationChart').getContext('2d');
            registrationChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: [], // Dynamic labels
                    datasets: [{
                        label: 'Utilisateurs inscrits',
                        data: [], // Dynamic data
                        backgroundColor: 'rgba(54, 162, 235, 0.6)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1,
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            document.getElementById('periodFilterSelect').onchange = function (event) {
                updateChartData(event.target.value);
            };
        });
        const registrationUsers = document.getElementById('registrationChart');
        registrationUsers.onclick = (evt) => {
            const res = registrationChart.getElementsAtEventForMode(
                evt,
                'nearest',
                { intersect: true },
                true
            );

            if (res.length > 0) {
                const index = res[0].index;
                const label = registrationChart.data.labels[index];
                updateChartData('month', label);
                document.getElementById('periodFilterSelect').value = 'month';
            }
        };

        function updateChartData(filterMode, year=null) {
            fetch(`/admin/user-registrations?filterMode=${filterMode}&yearSelected=${year}`)
                .then(response => response.json())
                .then(data => {
                    registrationChart.data.labels = data.labels;
                    registrationChart.data.datasets[0].data = data.data;
                    registrationChart.update();
                });
        }
    </script>

{% endblock %}
